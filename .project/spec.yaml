specVersion: v2
specMinorVersion: 2
meta:
  name: Alfi
  image: project-alfi
  description: ""
  labels: []
  createdOn: "2024-08-13T16:03:30Z"
  defaultBranch: main
layout:
- path: code/
  type: code
  storage: git
- path: models/
  type: models
  storage: gitlfs
- path: data/
  type: data
  storage: gitlfs
- path: data/scratch/
  type: data
  storage: gitignore
environment:
  base:
    registry: nvcr.io
    image: nvidia/ai-workbench/python-cuda122:1.0.3
    build_timestamp: "20231214221614"
    name: Python with CUDA 12.2
    supported_architectures: []
    cuda_version: "12.2"
    description: A Python Base with CUDA 12.2
    entrypoint_script: ""
    labels:
    - cuda12.2
    apps:
    - name: jupyterlab
      type: jupyterlab
      class: webapp
      start_command: jupyter lab --allow-root --port 8888 --ip 0.0.0.0 --no-browser
        --NotebookApp.base_url=\$PROXY_PREFIX --NotebookApp.default_url=/lab --NotebookApp.allow_origin='*'
      health_check_command: '[ \$(echo url=\$(jupyter lab list | head -n 2 | tail
        -n 1 | cut -f1 -d'' '' | grep -v ''Currently'' | sed "s@/?@/lab?@g") | curl
        -o /dev/null -s -w ''%{http_code}'' --config -) == ''200'' ]'
      stop_command: jupyter lab stop 8888
      user_msg: ""
      logfile_path: ""
      timeout_seconds: 60
      icon_url: ""
      webapp_options:
        autolaunch: true
        port: "8888"
        proxy:
          trim_prefix: false
        url_command: jupyter lab list | head -n 2 | tail -n 1 | cut -f1 -d' ' | grep
          -v 'Currently'
    programming_languages:
    - python3
    icon_url: ""
    image_version: 1.0.3
    os: linux
    os_distro: ubuntu
    os_distro_release: "22.04"
    schema_version: v2
    user_info:
      uid: ""
      gid: ""
      username: ""
    package_managers:
    - name: apt
      binary_path: /usr/bin/apt
      installed_packages:
      - curl
      - git
      - git-lfs
      - python3
      - gcc
      - python3-dev
      - python3-pip
      - vim
    - name: pip
      binary_path: /usr/local/bin/pip
      installed_packages:
      - jupyterlab==4.0.7
    package_manager_environment:
      name: ""
      target: ""
execution:
  apps:
  - name: Visual Studio Code
    type: vs-code
    class: native
    start_command: ""
    health_check_command: '[ \$(ps aux | grep ".vscode-server" | grep -v grep | wc
      -l ) -gt 4 ] && [ \$(ps aux | grep "/.vscode-server/bin/.*/node .* net.createConnection"
      | grep -v grep | wc -l) -gt 0 ]'
    stop_command: ""
    user_msg: ""
    logfile_path: ""
    timeout_seconds: 120
    icon_url: ""
  - name: Redis
    type: custom
    class: process
    start_command: /project/apps/redis.sh start
    health_check_command: /project/apps/redis.sh status
    stop_command: /project/apps/redis.sh stop
    user_msg: ""
    logfile_path: ""
    timeout_seconds: 60
    icon_url: redis.io/favicon.ico
  - name: Milvus DB
    type: custom
    class: process
    start_command: /project/apps/milvus.sh start
    health_check_command: /project/apps/milvus.sh status
    stop_command: /project/apps/milvus.sh stop
    user_msg: ""
    logfile_path: ""
    timeout_seconds: 60
    icon_url: milvus.io/favicon-32x32.png
  - name: Ollama
    type: custom
    class: process
    start_command: /project/apps/ollama.sh start
    health_check_command: /project/apps/ollama.sh status
    stop_command: /project/apps/ollama.sh stop
    user_msg: ""
    logfile_path: ""
    timeout_seconds: 60
    icon_url: ollama.com/public/icon-32x32.png
  - name: Open-WebUI
    type: custom
    class: process
    start_command: /project/apps/open-webui.sh start
    health_check_command: /project/apps/open-webui.sh status
    stop_command: /project/apps/open-webui.sh stop
    user_msg: ""
    logfile_path: ""
    timeout_seconds: 60
    icon_url: github.com/open-webui/open-webui/blob/main/static/favicon.png
  - name: Discord Agent
    type: custom
    class: webapp
    start_command: cd /project/code/discord_agent && PROXY_PREFIX=$PROXY_PREFIX python3
      discord_agent.py
    health_check_command: curl -f "http://localhost:8080/"
    stop_command: pkill -f '^python3 discord_agent.py'
    user_msg: ""
    logfile_path: ""
    timeout_seconds: 60
    icon_url: ""
    webapp_options:
      autolaunch: true
      port: "8080"
      proxy:
        trim_prefix: false
      url: http://localhost:8080/
  - name: Tortoise-tts
    type: custom
    class: process
    start_command: /project/apps/tortoise-tts.sh start
    health_check_command: /project/apps/tortoise-tts.sh status
    stop_command: /project/apps/tortoise-tts.sh stop
    user_msg: ""
    logfile_path: ""
    timeout_seconds: 60
    icon_url: ""
  resources:
    gpu:
      requested: 0
    sharedMemoryMB: 1024
  secrets:
  - variable: DISCORD_TOKEN
    description: Discord API Access Token
  mounts:
  - type: project
    target: /project/
    description: Project directory
    options: rw
  - type: host
    target: /var/host-run/
    description: Host's runtime files for Docker
    options: ""
